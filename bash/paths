###################
# Use proper tools on OS X
has_brew=`which brew`

if [[ $has_brew ]]; then
    # Local bin should take precedence
    PATH=`brew --prefix`/bin:`brew --prefix`/sbin:$PATH
    export PATH
fi

if [[ $has_brew  && -d `brew --prefix`/share/python ]]; then
    # Brew'ed Python installed so make scripts available
    PATH=`brew --prefix`/share/python:$PATH
    export PATH
fi

# on OS X use proper coreutils from homebrew instead of outdated apple rubbish
if [[ $has_brew && -d `brew --prefix coreutils`/libexec/gnubin ]]; then
    PATH=`brew --prefix coreutils`/libexec/gnubin:$PATH
    export PATH
    # Make sure manpage lookups refer to the coreutils installations (v8.20+)
    MANPATH=/usr/local/opt/coreutils/libexec/gnuman:$MANPATH
    export MANPATH
fi

unset has_brew

###################
# Sun Java when available (i.e. not OpenJDK)
if [[ -e /usr/lib/jvm/java-6-sun/ ]] ; then
  JAVA_HOME=/usr/lib/jvm/java-6-sun/
  export JAVA_HOME
fi

if [[ -e /usr/libexec/java_home ]] ; then
  JAVA_HOME=`/usr/libexec/java_home`
  export JAVA_HOME
fi

###################
# Virtualenvwrapper (Python, Pip)
if [[ `which virtualenvwrapper.sh` ]] ; then
  export WORKON_HOME=$HOME/.virtualenvs
  source `which virtualenvwrapper.sh`
fi

###################
# RbEnv - Simple Ruby Version Manager
if [[ -e $HOME/.rbenv ]] ; then
  export PATH=$HOME/.rbenv/bin:$PATH
  # Add rbenv shims to PATH and set up autocompletion
  eval "$(rbenv init -)"
fi

###################
#Node Version Manager
[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh # This loads NVM

###################
# Local bin
if [ -d "$HOME/bin" ] ; then
    PATH=$HOME/bin:$PATH
    export PATH
fi
